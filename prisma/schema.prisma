// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      UserRole   @default(user)
  bookings  Booking[]
  reviews   Review[]
  feedbacks Feedback[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

enum UserRole {
  superAdmin
  admin
  user
}

model Service {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  price        Float
  availability Boolean   @default(true)
  bookings     Booking[]
  reviews      Review[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Booking {
  id        Int           @id @default(autoincrement())
  userId    Int
  serviceId Int
  status    BookingStatus @default(Pending)
  user      User          @relation(fields: [userId], references: [id])
  service   Service       @relation(fields: [serviceId], references: [id])
  date      String
  shift     BookingShift
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum BookingShift {
  SUNRISE_STRATEGY
  MORNING_MASTERY
  LUNCHTIME_LEARNING
  AFTERNOON_ADVANCEMENT
  TWILIGHT_TACTICS
  EVENING_EXCELLENCE
  NIGHTLY_NAVIGATION
  MIDNIGHT_MOTIVATION
}

enum BookingStatus {
  Pending
  Accepted
  Cancelled
}

// Review model for user reviews and ratings
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
